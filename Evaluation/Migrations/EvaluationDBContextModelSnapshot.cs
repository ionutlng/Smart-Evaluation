// <auto-generated />
using System;
using Evaluation.Data;
using Evaluation.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Evaluation.Migrations
{
    [DbContext(typeof(EvaluationDBContext))]
    partial class EvaluationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Evaluation.Models.Course", b =>
                {
                    b.Property<int>("cId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("courseName")
                        .IsRequired();

                    b.Property<int>("profesorId");

                    b.HasKey("cId");

                    b.HasIndex("profesorId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Evaluation.Models.CourseStudent", b =>
                {
                    b.Property<int>("sId");

                    b.Property<int>("cId");

                    b.HasKey("sId", "cId");

                    b.HasIndex("cId");

                    b.ToTable("CourseStudent");
                });

            modelBuilder.Entity("Evaluation.Models.Exam", b =>
                {
                    b.Property<int>("eId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CoursecId");

                    b.Property<int>("examDifficulty");

                    b.Property<int>("examTime");

                    b.Property<int>("nrQuestions");

                    b.Property<int>("profesorId");

                    b.HasKey("eId");

                    b.HasIndex("CoursecId");

                    b.HasIndex("profesorId");

                    b.ToTable("Exam");
                });

            modelBuilder.Entity("Evaluation.Models.ExamQuestion", b =>
                {
                    b.Property<int>("eId");

                    b.Property<int>("qId");

                    b.HasKey("eId", "qId");

                    b.HasIndex("qId");

                    b.ToTable("ExamQuestion");
                });

            modelBuilder.Entity("Evaluation.Models.Feedback", b =>
                {
                    b.Property<int>("fId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(5000);

                    b.Property<int>("examId");

                    b.HasKey("fId");

                    b.HasIndex("examId");

                    b.ToTable("Feedback");
                });

            modelBuilder.Entity("Evaluation.Models.Profesor", b =>
                {
                    b.Property<int>("pId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("pId");

                    b.ToTable("Profesor");
                });

            modelBuilder.Entity("Evaluation.Models.Question", b =>
                {
                    b.Property<int>("qId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Difficulty");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(1200);

                    b.Property<int>("Time");

                    b.Property<int>("profesorId");

                    b.HasKey("qId");

                    b.HasIndex("profesorId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("Evaluation.Models.Student", b =>
                {
                    b.Property<int>("sId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("grade");

                    b.Property<string>("studPassword")
                        .IsRequired()
                        .HasMaxLength(18);

                    b.Property<string>("studUsername")
                        .IsRequired()
                        .HasMaxLength(30);

                    b.HasKey("sId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Evaluation.Models.Course", b =>
                {
                    b.HasOne("Evaluation.Models.Profesor", "Profesor")
                        .WithMany("Courses")
                        .HasForeignKey("profesorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Evaluation.Models.CourseStudent", b =>
                {
                    b.HasOne("Evaluation.Models.Course", "Course")
                        .WithMany("CourseStudents")
                        .HasForeignKey("cId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Evaluation.Models.Student", "Student")
                        .WithMany("CourseStudents")
                        .HasForeignKey("sId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Evaluation.Models.Exam", b =>
                {
                    b.HasOne("Evaluation.Models.Course")
                        .WithMany("Exams")
                        .HasForeignKey("CoursecId");

                    b.HasOne("Evaluation.Models.Profesor", "Profesor")
                        .WithMany("Exams")
                        .HasForeignKey("profesorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Evaluation.Models.ExamQuestion", b =>
                {
                    b.HasOne("Evaluation.Models.Exam", "Exam")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("eId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Evaluation.Models.Question", "Question")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("qId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Evaluation.Models.Feedback", b =>
                {
                    b.HasOne("Evaluation.Models.Exam", "Exam")
                        .WithMany("Feedbacks")
                        .HasForeignKey("examId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Evaluation.Models.Question", b =>
                {
                    b.HasOne("Evaluation.Models.Profesor", "Profesor")
                        .WithMany("Questions")
                        .HasForeignKey("profesorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
